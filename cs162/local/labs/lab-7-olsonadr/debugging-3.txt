Looking through code, to compute average and avoid any possible typing errors, I'll move the "/ n" from line 77 down to line 79, making it "return avg / n;"

Setting a breakpoint around 90 shows that it's going to find a minimum by only setting max when the current age is smaller than max, so change the > to a <.

Then I check the file name by breaking at 55 and printing filename, this works correctly.

The error is a segmentation fault in free() apparently. Deleting something that isn't dynamic?

I want to see if n is correct, so I'll break at 57 and watch it while I step. It was correct.

Stop at 63 to check new_person from file in, which is correct, but I'll then get there again and check what it thinks the person at 0 is (is it overriding?), but it is not, they are all still correct when new ones are added.

Oh wait! You don't delete the people at any point, adding "delete[] people" to line 116.

Now adding breakpoint to 108 to check if people is still accurate outside read_people(), but it segafaults between 63 and 66. Replacing do-while with while loop and using fail check person array at 63.

THERE ARE CHARACTERS IN THE IDS, CHANGE STRUCT DEFINITION TO HAVE STRING FOR ID.

Gets to eof check after last element, adding check that i is less than n.

I had tried multiple times to make this change, but making the people pointer parameter of read_people() a reference to a pointer makes it work. I'm quite angry.
